Parameters: 
  EC2KeyName:
    Description: Name of the existing EC2 KeyPair to use for SQL Server EC2
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must the name of existing EC2 keypair

  S3BucketName:
    Description: Enter S3 Bucket name to be created
    Type: String



Resources: 
  PubPrivateVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.30.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpcSQLAudit

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: us-east-1a
      CidrBlock: 10.30.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-publicSubnetSQLAudit

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.30.2.0/24
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-privateSubnet1SQLAudit

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.30.3.0/24
      VpcId: !Ref PubPrivateVPC
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-privateSubnet2SQLAudit 

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-internetGatewaySQLAudit
        - Key: Name
          Value: public

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref PubPrivateVPC
      InternetGatewayId: !Ref InternetGateway


  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PubPrivateVPC
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${AWS::StackName}-routeTableSQLAudit

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  NatPublicIP:
    Type: "AWS::EC2::EIP"
    DependsOn: PubPrivateVPC
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - "NatPublicIP"
    Properties: 
      AllocationId: !GetAtt NatPublicIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ngwSQLAudit

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PubPrivateVPC
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub ${AWS::StackName}-privateroutetableSQLAudit

  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

## Create Database Subnet Group 

  dbsubnetgroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: !Sub DB Subnet group for ${AWS::StackName}.
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBSNGSQLAudit


  PublicSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref PubPrivateVPC
      GroupDescription: allow connections from specified CIDR ranges
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSecGroupSQLAudit               
        #SecurityGroupIngress:
        #- IpProtocol: tcp
        #  FromPort: 80
        #  ToPort: 80
        #  CidrIp: 0.0.0.0/0
        #- IpProtocol: tcp
        #  FromPort: 3389
        #  ToPort: 3389
        #  CidrIp: 0.0.0.0/0 
        #  Description: Allows RDP access 

  SQLSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref PubPrivateVPC
      GroupDescription: Allow connect to SQL Server
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-SQLSecGroupSQLAudit
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 1433
        ToPort: 1433
        SourceSecurityGroupId: !Ref PublicSecGroup
        Description: Allows SQL Server access from app
  ruleDbSecGroupSelfIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SQLSecGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SQLSecGroup

  DbSecGroup:
    Type: 'AWS::RDS::DBSecurityGroup'
    Properties:
      EC2VpcId: !Ref PubPrivateVPC
      GroupDescription: RDS Security Group
      DBSecurityGroupIngress:
        EC2SecurityGroupId: !Ref SQLSecGroup
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-DBSecGroupSQLAudit
      


  # create Bastion host
  bastionHost:
        Type: AWS::EC2::Instance
        Properties:
          SubnetId: !Ref PublicSubnet
          ImageId: ami-009bb3e777e9271be
          InstanceType: t2.xlarge
          KeyName: !Ref EC2KeyName
          SecurityGroupIds: [!Ref PublicSecGroup]
          IamInstanceProfile: !Ref EC2Instanceprofile
          Tags:
            - Key: Name
              Value: !Sub ${AWS::StackName}-bastion-hostSQLAudit




# Option groups
  OptionGroupsRoles:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "rds.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "rds-s3-access-auditing"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "s3:ListAllMyBuckets"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - s3:GetBucketLocation
                  - s3:GetBucketACL
                  - s3:ListBucket
                Resource:
                  - !Join 
                    - '' 
                    - - 'arn:aws:s3:::' 
                      - !Ref S3BucketAuditingRetention 
              -
                Effect: "Allow"
                Action:
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                  - s3:PutObject
                Resource:
                  - !Join 
                    - '' 
                    - -  'arn:aws:s3:::' 
                      - !Ref S3BucketAuditingRetention 
                      - '/*' 
                

  myOptionGroup:
    Type: 'AWS::RDS::OptionGroup'
    Properties:
      EngineName: sqlserver-ex
      MajorEngineVersion: '14.00'
      OptionGroupDescription: 'SQL Server auditing'
      OptionConfigurations:
        - OptionName: SQLSERVER_AUDIT
          OptionSettings:
            - Name: 'IAM_ROLE_ARN'
              Value: !GetAtt OptionGroupsRoles.Arn
            - Name: 'ENABLE_COMPRESSION'
              Value: 'false'
            - Name: 'S3_BUCKET_ARN'
              Value: !Sub "arn:aws:s3:::${S3BucketAuditingRetention}"
              

    

# Create RDS instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: dbsubnetgroup
    Properties:
      AllocatedStorage: 100
      AvailabilityZone: us-east-1a
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t3.medium
      DBInstanceIdentifier: sqlauditsqlserver
      DBSecurityGroups: [!Ref DbSecGroup]
      DBSubnetGroupName: !Ref dbsubnetgroup
      Engine: sqlserver-ex
      EngineVersion: '14.00.3281.6.v1'
      MasterUsername: admin
      MasterUserPassword: password
      MaxAllocatedStorage: 1000
      MultiAZ: false
      OptionGroupName: !Ref myOptionGroup



# Cloud Watch Log Group
  CWLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', ['KDF',!Ref GlueTable]]
      RetentionInDays: 90

# Cloud Watch Log Stream
  CWLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref CWLogGroup
      LogStreamName: 'S3Delivery'

# Create S3 Bucket

  S3BucketAuditing:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName

  S3BucketAthena:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref S3BucketName, 'athenaworkgroup']]

  S3BucketAuditingRetention:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref S3BucketName, 'retention']]

## Glue Database
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId 
      DatabaseInput: {}

## Glue Table
  GlueTable:
    Type: AWS::Glue::Table
    Properties: 
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDatabase 
      TableInput:

        Name: auditgluetable
        Owner: owner 
        Retention: 0
        StorageDescriptor:
          Columns:
            - Name: event_time
              Type: string
            - Name: sequence_number 
              Type: int
            - Name: action_id 
              Type: string
            - Name: succeeded 
              Type: boolean
            - Name: session_id 
              Type: int 
            - Name: server_principal_id 
              Type: int
            - Name: database_principal_id 
              Type: int
            - Name: target_server_pricipal_od 
              Type: int
            - Name: target_database_principal_id 
              Type: int
            - Name: object_id 
              Type: int
            - Name: class_type
              Type: string
            - Name: server_principal_name 
              Type: string
            - Name: database_principal_name 
              Type: string
            - Name: server_instance_name 
              Type: string
            - Name: database_name 
              Type: string 
            - Name: schema_name 
              Type: string
            - Name: object_name 
              Type: string
            - Name: statement 
              Type: string
            - Name: file_name 
              Type: string
            - Name: transaction_id 
              Type: int
            - Name: client_ip
              Type: string
            - Name: application_name 
              Type: string
            - Name: duration_milliseconds 
              Type: int
            - Name: response_rows 
              Type: int
            - Name: affected_rows 
              Type: int 
            - Name: connection_id 
              Type: string
            - Name: host_name 
              Type: string
            - Name: computername 
              Type: string
            - Name: dt 
              Type: string
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          Compressed: false
          NumberOfBuckets: -1 
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
          Parameters:
            serialization.format: '1' 
            #BucketColumns: [] 
            #SortColumns: [] 
            StoredAsSubDirectories: false 
        PartitionKeys:
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day            
            Type: string
          - Name: hour
            Type: string 
        TableType: EXTERNAL_TABLE

## Crawler
  AuditingCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: 'SQLAuditing-Crawler'
      Role: !GetAtt CrawlerGlueRole.Arn
      DatabaseName: !Ref GlueDatabase
      Targets:
        S3Targets:
          - Path: !Ref S3BucketAuditing
      SchemaChangePolicy:
        UpdateBehavior: 'UPDATE_IN_DATABASE'
        DeleteBehavior: 'LOG'
      Schedule:
        ScheduleExpression: 'cron(0/10 * * * ? *)'

## WorkGroup Query
  AthenaWorkGroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: MyCustomWorkGroup
      Description: My WorkGroup
      State: ENABLED
      Tags:
        - Key: "key1"
          Value: "value1"
        - Key: "key2"
          Value: "value2"
      WorkGroupConfiguration:
        BytesScannedCutoffPerQuery: 200000000
        EnforceWorkGroupConfiguration: false
        PublishCloudWatchMetricsEnabled: false
        RequesterPaysEnabled: true
        ResultConfiguration:
          OutputLocation: !Join ['', ['s3://',!Ref S3BucketAuditing]]


## EC2 Instance Profile
  EC2Instanceprofile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        -
          Ref: EC2Role

## EC2 Role
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: EC2_delivery_policy 
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action:
                  - firehose:PutRecord
                  - firehose:PutRecordBatch
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:firehose:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':deliverystream/'
                      - !Ref deliverystream


## Create Role
  deliveryRole: 
    Type: AWS::IAM::Role 
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17 
        Statement: 
          - Sid: '' 
            Effect: Allow 
            Principal: 
              Service: firehose.amazonaws.com 
            Action:             'sts:AssumeRole' 
            Condition: 
              StringEquals: 
                'sts:ExternalId': !Ref 'AWS::AccountId' 
      Path: "/" 
                
      Policies: 
        - PolicyName: firehose_delivery_policy 
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - Effect: Allow 
                Action: 
                  - 's3:AbortMultipartUpload' 
                  - 's3:GetBucketLocation'
                  - 's3:GetObject' 
                  - 's3:ListBucket' 
                  - 's3:ListBucketMultipartUploads' 
                  - 's3:PutObject'
                Resource: 
                  - !Join 
                    - '' 
                    - - 'arn:aws:s3:::' 
                      - !Ref S3BucketAuditing 
                  - !Join 
                    - '' 
                    - -  'arn:aws:s3:::' 
                      - !Ref S3BucketAuditing 
                      - '/*' 
              - Effect: Allow 
                Action: 'glue:GetTableVersions'
                Resource: '*' 
              - Effect: Allow 
                Action: 'logs:PutLogEvents' 
                Resource: 
                  - !Join 
                    - '' 
                    - - 'arn:aws:logs:' 
                      - !Ref 'AWS::Region' 
                      - ':' 
                      - !Ref 'AWS::AccountId' 
                      - 'log-group:KDF-' 
                      - !Ref GlueTable 
                      - ':log-stream:*' 

## Crawler Glue Role
  CrawlerGlueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"

# Create Kinesis Delivery Stream
  deliverystream:
    Type: AWS::KinesisFirehose::DeliveryStream 
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration: 
        RoleARN: !GetAtt deliveryRole.Arn 
        BucketARN: !Join
          - '' 
          - - 'arn:aws:s3:::'
            - !Ref S3BucketAuditing 
        
        BufferingHints: 
          SizeInMBs: 64 
          IntervalInSeconds: 60 
        CompressionFormat: UNCOMPRESSED
        EncryptionConfiguration: 
          NoEncryptionConfig: NoEncryption 
        CloudWatchLoggingOptions:
          Enabled: true 
          LogGroupName: !Join 
            - '' 
            - - 'KDF-' 
              - !Ref GlueTable 
          LogStreamName: S3Delivery 
        S3BackupMode: Disabled 
        DataFormatConversionConfiguration:
          SchemaConfiguration: 
            CatalogId: !Ref AWS::AccountId 
            RoleARN: !GetAtt deliveryRole.Arn
            DatabaseName: !Ref GlueDatabase 
            TableName: !Ref GlueTable 
            Region: !Ref AWS::Region
            VersionId: LATEST 
          InputFormatConfiguration: 
            Deserializer: 
              OpenXJsonSerDe: {}
          OutputFormatConfiguration: 
            Serializer: 
              ParquetSerDe: {} 
          Enabled: True 

            

Outputs:
  BastionHost:
    Description: The Bastion Host Instance id
    Value: !Ref bastionHost
  RDS:
    Description: RDS Host Name
    Value: !Ref RDSInstance
  DeliveryStreamARN:
    Description: The ARN of the fireose delivery stream 
    Value: !GetAtt deliverystream.Arn
  GlueDatabase:
    Description: The GlueDatabaseName
    Value: !Ref GlueDatabase
  GlueTable:
    Description: Glue table name
    Value: !Ref GlueTable
  Roles:
    Description: Role for Firehose delivery
    Value: !Ref deliveryRole
  S3BucketName:
    Description: S3 Bucket for parquet files
    Value: !Ref S3BucketAuditing
